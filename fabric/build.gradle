plugins {
	id 'com.github.johnrengelman.shadow'
}

architectury {
	platformSetupLoomIde()
	fabric()
}

configurations {
	common {
		canBeResolved = true
		canBeConsumed = false
	}
	compileClasspath.extendsFrom common
	runtimeClasspath.extendsFrom common
	developmentFabric.extendsFrom common

	// Files in this configuration will be bundled into your mod using the Shadow plugin.
	// Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
	shadowBundle {
		canBeResolved = true
		canBeConsumed = false
	}
}

//repositories {
//	// Add repositories to retrieve artifacts from in here.
//	// You should only use this when depending on other mods because
//	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
//	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
//	// for more information about repositories.
//	maven {
//		name = 'ParchmentMC'
//		url = 'https://maven.parchmentmc.org/'
//	}
//
//}

archivesBaseName = "${mod_id}-fabric"
version = "${rootProject.mod_version}_mc${rootProject.fabric_supported_versions}"

dependencies {
	// fabric mod loader
	modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"

	// mixin extras
	include(implementation(annotationProcessor("io.github.llamalad7:mixinextras-fabric:0.2.2")))

	// common files
	common(project(path: ':common', configuration: 'namedElements')) { transitive false }
	shadowBundle project(path: ':common', configuration: 'transformProductionFabric')
}


processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

shadowJar {
	configurations = [project.configurations.shadowBundle]
	archiveClassifier = 'dev-shadow'
}

remapJar {
	input.set shadowJar.archiveFile
}


//tasks.withType(JavaCompile).configureEach {
//	it.options.release = 17
//}